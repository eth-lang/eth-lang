(import "eth/ast" ast)
(import "eth/compiler/helpers" (list-pair-values list-odd-values))

; Quotes the given AST preventing it's evaluation. This is, while taking care of honoring
; unquotes and unquote-splicings
(defmacro quote (node)
  (def L ast.list)
  (def S ast.symbol)

  ; Takes a node a unquote it, returning the list of elements to append to the containing list
  ; ~@a -> a
  ; ~@[a b c] -> [a b c]
  ; ~@(a b c) -> [a b c]
  (def unquote-splicing-expand (fn (node)
    (if (ast.symbol? node) node
    (if (ast.array? node)
      node
      (map identity node)))))

  ; Takes a list/array and applies quoting to it, while honoring unquotes and unquote-splicings
  ; (unquote a) -> [a]
  ; (unquote-splicing a) -> a
  ; a -> [(quote a)]
  (def sequence-expand (fn (nodes)
      (apply L (.concat [(S ".concat")]
        (map (fn (node)
          (if (ast.unquote? node) [(nth 1 node)]
            (if (ast.unquote-splicing? node)
              (unquote-splicing-expand (nth 1 node))
              [(L (S "quote") node)]))) nodes)))))

  (if (ast.symbol? node) (L (S "quote") node)
  (if (ast.keyword? node) (L (S "quote") node)
  (if (ast.string? node) node
  (if (ast.number? node) node
  (if (ast.boolean? node) node
  (if (ast.null? node) node
  (if (ast.undefined? node) node
  (if (empty? node) node
  (if (ast.unquote? node) (nth 1 node)
  (if (ast.unquote-splicing? node)
    (throw (Error. "Illegal use of `~@` expression, can only be present in a list"))
  (if (ast.array? node) (sequence-expand node)
  (if (ast.object? node) (mapObjIndexed (fn (v) (L (S "quote") v)))
  (if (ast.list? node) (L (S "apply") (S "list") (sequence-expand node))
  (throw (Error. (+ "Unhandled ast node type given to 'quote', got: " (ast.print node))))
  ))))))))))))))

; For now quote behaves like quasi-quote should, just use that
(defmacro quasi-quote (node)
  (ast.list (ast.symbol "quote") node))

(defmacro defn (name params ... body)
  `(def ~name (fn ~name ~params ~@body)))

(defmacro let (definitions ... body)
  `(do ~@(map (fn (d) (prepend 'def d)) definitions) ~@body))

(defmacro export (name value)
  `(set (get ~name __eth__module) ~value))

(defmacro package (name exports ... body)
  `(do
    (def __eth__module {})
    ~@body
    ~@(map (fn (e) `(export ~(keyword e) ~e)) exports)
    (if (!= (typeof module) "undefined")
      (set (get :exports module) __eth__module))
    (if (!= (typeof __eth__global) "undefined")
      (set (get ~(symbol-name name) __eth__global) __eth__module))
    (void 0)))

(defmacro \ (... body)
  "Returns a function that calls it's first body node with the rest of it's body, replacing
  # for the first argument and #n with argument n (where is starts at 1 and caps at 9)"
  (let ((args-sym (gensym)))
    `(fn ()
      (def ~args-sym arguments)
      (~@(ast-map-node (fn (node)
        (if (symbol? node)
          (if (== node '#)
            `(get 0 ~args-sym)
            (let ((sym-name (symbol-name node))
                  (sym-arg? (regexp-find "^\#\d$" sym-name)))
                (if sym-arg?
                  `(get ~(dec (parse-int (.slice sym-name 1))) ~args-sym)
                  node)))
        node)) body)))))

(defmacro loop (defs ... body)
  "Provided with definitions (like let) will run it's body, if `recur` is called, the body
  executes again from the start but with the definitions values updated to match the args given to
  recur

  (defn reduce (f init list)
    (loop (acc init
           list list)
      (if (empty? list)
        acc
        (recur (f acc (head list)) (tail list)))))"
  (let ((loop-id (gensym)))
    `((fn ~loop-id ~(list-pair-values defs)
        ~@(ast-map-node (\ if (== # 'recur) loop-id #) body))
      ~@(list-odd-values defs))))
