(package eth/test/write ()

(import "../testing" (new-run run test assert assert-equal assert-throws))
(import "../types" (string))
(import "../write" (write))

(new-run)

(def DQ (String.from-char-code 34)) ; double quote

(defn create-ast (nodes)
  {:filename "test.eth" :nodes nodes})

(defn create-js-string (text)
  (string DQ text DQ))

(test "write: string" (fn ()
  (assert-equal (write (create-ast ["abc"])) (create-js-string "abc"))))

(test "write: number" (fn ()
  (assert-equal (write (create-ast [0 123 -5 1.23])) "0;123;-5;1.23")))

(test "write: bool" (fn ()
  (assert-equal (write (create-ast [true false])) "true;false")))

(test "write: null" (fn ()
  (assert-equal (write (create-ast [null])) "null")))

(test "write: undefined" (fn ()
  (assert-equal (write (create-ast [undefined])) "undefined")))

(test "write: keyword" (fn ()
  (assert-equal (write (create-ast '[:abc :a? :a-b :a!]))
    (join ";"
      [(create-js-string "abc")
       (create-js-string "isA")
       (create-js-string "aB")
       (create-js-string "a$")]))))

(test "write: keyword: quoted" (fn ()
  (assert-equal (write (create-ast ['(quote :asd)])) (create-js-string ':asd))))

(test "write: symbol" (fn ()
  (assert-equal
    (write (create-ast '[abc a? a-b a!]))
    (join ";" ["abc" "isA" "aB" "a$"]))))

(test "write: symbol: quoted" (fn ()
  (assert-equal (write (create-ast ['(quote asd)])) (create-js-string 'asd))))

(test "write: array" (fn ()
  (assert-equal
    (write (create-ast [[1 [2 undefined] :a "b"]]))
    (string
      "["
      (join "," ["1" "[2,undefined]" (create-js-string "a") (create-js-string "b")])
      "]"))))

(test "write: object" (fn ()
  (assert-equal (write (create-ast [{:a 1 b 2}]))
  (join "" ["{" (create-js-string "a") ":1," (create-js-string "b") ":2" "}"]))))

(test "write: list: empty" (fn ()
  (assert-equal (write (create-ast [(list)])) "list()")))

(test "write: list: call" (fn ()
  (assert-equal (write (create-ast ['(x y z)])) "x(y, z)")))

(test "write: list: dot call" (fn ()
  (assert-equal (write (create-ast ['(.x y z)])) (string "y.x(z)"))))

(test "write: list: dot call: non js ident" (fn ()
  (assert-equal (write (create-ast ['(.!* y z)])) (string "y[" (create-js-string "!*") "](z)"))))

(test "write: list: binary operators" (fn ()
  (assert-equal
    (write (create-ast ['(&& (instanceof (in x y) (% a b)) (|| (+ (* 1 1) (/ 1 2)) (- 3 6)))]))
    "(((x in y) instanceof (a % b)) && (((1 * 1) + (1 / 2)) || (3 - 6)))")))

(test "write: list: unary operators" (fn ()
  (assert-equal
    (write (create-ast ['(! (void (typeof (delete x))))]))
    "(! (void (typeof (delete x))))")))

(test "write: list: get: symbol" (fn ()
  (assert-equal
    (write (create-ast ['(get :a b)]))
    (string "b[" (create-js-string "a") "]"))))

(test "write: list: get: string" (fn ()
  (assert-equal (write (create-ast ['(get "a" b)])) "b.a")))

(test "write: list: get: number" (fn ()
  (assert-equal (write (create-ast ['(get 0 b)])) "b[0]")))

(test "write: list: get: keyword" (fn ()
  (assert-equal (write (create-ast ['(get a b)])) "b[a]")))

(test "write: list: set: one" (fn ()
  (assert-equal (write (create-ast ['(set x 5)])) "(x = 5)")))

(test "write: list: set: multiple" (fn ()
  (assert-equal (write (create-ast ['(set x 5 y 10)])) "(x = 5, y = 10)")))

(test "write: list: set: writes value" (fn ()
  (assert-equal (write (create-ast ['(set x (y z))])) "(x = y(z))")))

(test "write: list: def: one" (fn ()
  (assert-equal (write (create-ast ['(def x 5)])) "var x = 5")))

(test "write: list: def: multiple" (fn ()
  (assert-equal (write (create-ast ['(def x 5 y 10)])) "var x = 5, y = 10")))

(test "write: list: def: writes value" (fn ()
  (assert-equal (write (create-ast ['(def x (y z))])) "var x = y(z)")))

(test "write: list: cond" (fn ()
  (assert-equal
    (write (create-ast ['(cond true 0)]))
    "(function () {if (true) {return 0;}}.call(this))")))

(test "write: list: cond: multiple" (fn ()
  (assert-equal
    (write (create-ast ['(cond true 0 false 1)]))
    "(function () {if (true) {return 0;} else if (false) {return 1;}}.call(this))")))

(test "write: list: cond: else" (fn ()
  (assert-equal
    (write (create-ast ['(cond true 0 :else 1)]))
    "(function () {if (true) {return 0;} else if (true) {return 1;}}.call(this))")))

(test "write: list: fn: simplest" (fn ()
  (assert-equal
    (write (create-ast ['(fn ())]))
    "(function () {return undefined;})")))

(test "write: list: fn: one element body" (fn ()
  (assert-equal
    (write (create-ast ['(fn () 5)]))
    "(function () {return 5;})")))

(test "write: list: fn: multiple element body" (fn ()
  (assert-equal
    (write (create-ast ['(fn () 5 10)]))
    "(function () {5;return 10;})")))

(test "write: list: fn: named" (fn ()
  (assert-equal
    (write (create-ast ['(fn name() 5)]))
    "(function name() {return 5;})")))

(test "write: list: fn: null args" (fn ()
  (assert-equal
    (write (create-ast ['(fn null 5)]))
    "(function () {return 5;})")))

(test "write: list: fn: rest: alone" (fn ()
  (assert-equal
    (write (create-ast ['(fn (... xs) 5)]))
    "(function () {var xs = Array.prototype.slice.call(arguments, 0);return 5;})")))

(test "write: list: fn: rest: multiple args" (fn ()
  (assert-equal
    (write (create-ast ['(fn (x xx ... xs) 5)]))
    "(function (x, xx) {var xs = Array.prototype.slice.call(arguments, 2);return 5;})")))

(test "write: list: fn: non symbol args throws" (fn ()
  (assert-throws (fn () (write (create-ast ['(fn (a ok 5))]))))))

(run)
)
