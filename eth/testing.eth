(package eth/testing (test before after before-each after-each
                      run new-run
                      assert-equal assert-throws)

(import "./types" (string))
(import "./async" async)

; reporting

(def passed-count 0)
(def failed-count 0)
(def test-errors [])

(def color-red "\x1b[31m")
(def color-green "\x1b[32m")
(def color-reset "\x1b[0m")

(defn print-test-error (e)
  (print color-red "In test:" e.name "\n" color-reset e.error "\n"))

(defn report (name err)
  (if err
    (do
      (set failed-count (inc failed-count))
      (print color-red "✘" name color-reset)
      (set test-errors (append {:name name :error err} test-errors)))
    (do
      (set passed-count (inc passed-count))
      (print color-green "✔" name color-reset))))

(defn report-summary ()
  (print "")
  (if (> (length test-errors) 0)
    (do (for-each print-test-error test-errors) (print "\n"))
    ())
  (if (== failed-count 0)
    (print color-green "✔" passed-count "tests completed" color-reset)
    (print color-red "✘" failed-count "of" (+ passed-count failed-count) "tests failed" color-reset))
  (process.exit (if (== failed-count 0) 0 1)))


; scopes

(defn new-scope ()
  {:test []
   :before []
   :after []
   :before-each []
   :after-each []})

(def current-scope (new-scope))

(defn new-run ()
  (set current-scope (new-scope)))


; running

(defn run-fn (report? test)
  (let ((p-result
          (try (fn () (let ((result (test.body)))
                        (if (if result (of-type? :function result.then) false)
                          result
                          (async.resolve))))
               (fn (err) (async.reject err))))
        (success (fn ()
          (if report?
            (report test.name null)
            ())))
        (failure (fn (err)
          (if report?
            (report test.name err)
            (print (assoc :message
              (string "error in before or after for '" test.name "': " err.message) err))))))
    (async.then p-result success failure)))

(defn run-list (report? before-list after-list fn-list)
  (async.then (async.all (map ((curry run-fn) false) before-list))
    (fn () (async.then (async.all (map ((curry run-fn) report?) fn-list))
      (fn () (async.all (map ((curry run-fn) false) after-list)))))))


(defn run-scope (scope)
  (async.then (run-list false [] [] scope.before)
    (fn () (async.then (run-list true scope.before-each scope.after-each scope.test)
      (fn () (async.then (run-list false [] [] scope.after)))))))

(defn run ()
  (print "Running" (length current-scope.test) "tests...\n")
  (async.then (run-scope current-scope)
    (fn () (report-summary))))


; api

(defn append-to-scope-key (key value)
  (set current-scope (update-in [key] (append value) current-scope)))

(defn test (name f) (append-to-scope-key :test {:name name :body f}))
(def before ((curry append-to-scope-key) :before))
(def after ((curry append-to-scope-key) :after))
(def before-each ((curry append-to-scope-key) :before-each))
(def after-each ((curry append-to-scope-key) :after-each))


; assertions

(defn assert-equal (a b)
  (if (!= (to-json a) (to-json b))
    (assert false (string "\n" (to-json a) "\n" "\u2191" " is not equal to " "\u2193" "\n" (to-json b)))
    ()))

(defn assert-throws (f message)
  (let ((threw false))
    (try f (fn () (set threw true)))
    (if (! threw)
      (assert false message)
      ())))

)
