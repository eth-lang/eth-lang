(package eth (compile)

; Initialize macro runtime
(set GLOBAL.__eth__macros (|| GLOBAL.__eth__macros {}))
(set GLOBAL.__eth__install-macro (fn (name expander)
  (set (get name GLOBAL.__eth__macros) expander)))

(import "./read" (read))
(import "./expand" (expand))
(import "./write" (write pretty-print))
(import "./beautify" (beautify))

(defn compile (filename source)
  (let ((ast {:filename filename :source source})
        (read-ast (assoc :nodes (read filename source) ast))
        (expanded-ast (assoc :nodes (expand read-ast) read-ast)))
    (print (pretty-print expanded-ast))
    (assoc :compiled (beautify (write expanded-ast)) expanded-ast)))

)
