(package eth/testing (test before after before-each after-each run new-run)

(import "./core" (..))
(import "./promise" promise)

; reporting

(def passed-count 0)
(def failed-count 0)
(def test-errors [])

(def color-red "\x1b[31m")
(def color-green "\x1b[32m")
(def color-reset "\x1b[0m")

(def report (name err)
  (if err
    (do
      (set failed-count (inc failed-count))
      (process.stdout.write (string color-red "!" color-reset))
      (set test-errors (append err test-errors)))
    (do
      (set passed-count (inc passed-count))
      (process.stdout.write (string color-green "." color-reset)))))

(def report-summary ()
  (print "\n")
  (if (> (len test-errors) 0)
    (do (for-each print test-errors) (print "\n"))
    ())
  (if (== failed-count 0)
    (print color-green "✔" passed-count "tests completed" color-reset)
    (print color-red "✘" failed-count "of" (+ passed-count failed-count) "tests failed" color-reset))
  (process.exit (if (== failed-count 0) 0 1)))


; scopes

(def new-scope ()
  {:test []
   :before []
   :after []
   :before-each []
   :after-each []})

(def current-scope (new-scope))

(def new-run ()
  (set current-scope (new-scope)))


; running

(def run-fn (report? test)
  (let ((p-result
          (try (fn () (let ((result (test.body)))
                        (if (if result (of-type? :function result.then) false)
                          result
                          (promise.resolve))))
               (fn (err) (promise.reject err))))
        (success (fn ()
          (if report?
            (report test.name null)
            ())))
        (failure (fn (err)
          (if report?
            (report test.name err)
            (print (assoc :message
              (string "error in before or after for '" test.name "': " err.message) err))))))
    (promise.then p-result success failure)))

(def run-list (report? before-list after-list fn-list)
  (promise.then (promise.all (map (curry run-fn false) before-list))
    (fn () (promise.then (promise.all (map (curry run-fn report?) fn-list))
      (fn () (promise.all (map (curry run-fn false) after-list)))))))


(def run-scope (scope)
  (promise.then (run-list false [] [] scope.before)
    (fn () (promise.then (run-list true scope.before-each scope.after-each scope.test)
      (fn () (promise.then (run-list false [] [] scope.after)))))))

(def run ()
  (print "Running" (len current-scope.test) "tests...\n")
  (promise.then (run-scope current-scope)
    (fn () (report-summary))))


; api

(def append-to-scope-key (key value)
  (set current-scope (update-in [key] (append value) current-scope)))

(def test (name f) (append-to-scope-key :test {:name name :body f}))
(def before (curry append-to-scope-key :before))
(def after (curry append-to-scope-key :after))
(def before-each (curry append-to-scope-key :before-each))
(def after-each (curry append-to-scope-key :after-each))

)
