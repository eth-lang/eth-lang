#!/usr/bin/env node

var path = require('path');
var core = require('../core');
var eth = require('../eth');

function ethEval(code, env, filename, callback) {
  try {
    var result = eth.eval(env, eth.read(filename, code));
    callback(null, result);
  } catch(e) {
    callback(e);
  }
}

function repl() {
  require('repl').start({
    prompt: 'eth> ',
    eval: ethEval
  });
}

function compile(filename, onlyAst) {
  var sourceCode = require('fs').readFileSync(filename, 'utf8');
  var ast = eth.read(filename, sourceCode);
  if (onlyAst) {
    return eth.print(ast);
  } else {
    return eth.write(ast);
  }
}

function help() {
  console.log([
    'Eth Usage:',
    '  eth                            run repl',
    '  eth file.eth                   compile and run file',
    '  eth [-h|--help]                show this message',
    '  eth [-c|--compile] file.eth    compile file to JS',
    '  eth [-a|--ast] file.eth        show file AST/tokens',
    ''
  ].join('\n'));
}

var args = process.argv.slice(2);
if (args.length === 0) {
  repl();
} else if (args[0] === '-h' || args[0] === '--help') {
  help();
} else if ((args[0] === '-a' || args[0] === '--ast') && args.length === 2) {
  console.log(compile(args[1], true));
} else if ((args[0] === '-c' || args[0] === '--compile') && args.length === 2) {
  console.log(compile(args[1]));
} else if (args.length === 1) {
  var filename = args[0];
  var sourceCode = require('fs').readFileSync(filename, 'utf8');
  var ast = eth.read(filename, sourceCode);
  var context = require('vm').createContext({
    global: global,
    console: console,
    exports: {},
    module: {exports: {}},
    require: require
  });

  var result = eth.eval(context, ast);

  if (typeof result !== 'undefined') {
    console.log(result);
  }
} else {
  help();
}
